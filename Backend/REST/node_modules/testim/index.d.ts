/**
 * Represents the Testim Dev Kit step locator.
 * @see https://help.testim.io/docs/working-with-locators
 */
declare class TDKStepLocator {
    elementLocator?: any;
    selector?: string;
    nthChildIndex?: number;
    id?: string;
    name?: string;
    innerLocator?: TDKStepLocator;
    parentLocator?: TDKStepLocator;
    find(selector: any): TDKStepLocator;
    nthChild(index: number): TDKStepLocator;
    childWithText(text: string): TDKStepLocator;
    /**
     * Sets the locator confidence threshold
     * @param threshold the locator conidence score
     */
    withConfidence(threshold: number): TDKStepLocator;
}
/**
 * Represents the options passed to a click.
 * @see https://help.testim.io/docs/click
 */
declare type ClickOptions = {
    button?: 'left' | 'right';
    offset?: {
        x: number;
        y: number;
    };
};
/**
 * Represents the return value from a getCookie or setCookie call.
 * @see https://help.testim.io/docs/get-cookie
 */
declare class CookieData {
    name?: string;
    value?: string;
    domain?: string;
    expires?: number;
    httpOnly?: boolean;
    secure?: boolean;
    path?: string;
}
/**
 * Represents an x/y point - passed to Drag and Drop
 */
declare type Point = {
    x: number;
    y: number;
};
/**
 * A CSS selector used to select an element. This is usually a string like `'.foo'` and the syntax is whatever
 * the browser and JSDOM's `document.querySelector` understand.
 * @see https://www.w3.org/TR/selectors-3/#selectors
 */
declare type Selector = string;
/**
 * All Testim methods that work on an element work on either a Selector or TDKStepLocator
 */
declare type SelectParam = Selector | TDKStepLocator;
/**
 * The options passed to a scrollToElement command
 * @see https://help.testim.io/docs/scroll-to-element
 */
declare type ScrollOptions = {
    scrollTarget?: SelectParam;
};
/** The options passed to a hover command
 * @see https://help.testim.io/docs/hover
 */
declare type HoverOptions = {
    offset?: {
        x: number;
        y: number;
    };
};
/** The options passed to a waitForCode command
 * @see https://help.testim.io/docs/wait-for-code
 */
declare type WaitForCodeOptions = {
    pollInterval: number;
};
/** The options passed to a resize command
 * @see https://help.testim.io/docs/resize
 */
declare type ResizeOptions = {
    width: number;
    height: number;
};
/** the options passed to a waitForElement command
 * @see https://help.testim.io/docs/wait-for-element
 */
declare type WaitForElementOptions = {
    checkVisibility?: boolean;
};
/** the options passed to a waitForText command
 * @see https://help.testim.io/docs/wait-for-text
 */
declare type WaitForTextOptions = {
    checkVisibility?: boolean;
};
declare type Headers = {
    [key: string]: string;
};
declare type RequestMethods = 'GET' | 'POST' | 'PUT' | 'PATH' | 'DELETE' | 'COPY' | 'HEAD' | 'OPTIONS';
declare type ApiCallOptions = {
    method?: RequestMethods;
    headers?: Headers;
    body?: string;
    sendViaWebApp?: boolean;
    omitCookies?: boolean;
};
export declare enum GeneratedValueTypes {
    LettersOnly = "Letters Only",
    NumbersOnly = "Numbers Only",
    Mixed = "Mixed"
}
/**
 * Clicks the given element on the screen, clicks on the element in its center by default.
 * @see https://help.testim.io/docs/click
 */
export declare function click(selector: SelectParam, options?: ClickOptions): Promise<void>;
/**
 * Clicks the given element on the screen, clicks on the element in its center by default.
 * @see https://help.testim.io/docs/dblclick
 */
export declare function dblclick(selector: SelectParam, options?: ClickOptions): Promise<void>;
/**
 * Sleeps a specified duration. Basically the same as
 * const sleep = require('util').promisify(setTimeout);
 * Except that it adds a sleep step to the UI
 * @param ms milliseconds to sleep
 */
export declare function sleep(ms: number): Promise<void>;
/**
 * Api call
 */
export declare function apiCall(url: string, options?: ApiCallOptions): Promise<{
    statusCode: number;
    statusText: string;
    requestDuration: number;
    responseBody: any;
    responseHeaders: any;
}>;
/**
 * Get latest download item work only in Chrome extension mode
 */
export declare function downloadFile(): Promise<{
    fileName: string;
    fileType: string;
    sizeInBytes: number;
    fileBlob: any;
}>;
/**
 * Generate random value letters/numbers/mixed
 */
export declare function generateRandomValue(generatedLength?: number, valueType?: GeneratedValueTypes, prefixValue?: string): Promise<string>;
/**
 * Generate Testim random email - PRO feature
 */
export declare function generateTestimEmail(): Promise<string>;
/**
 * Get email messages from Testim email inbox - PRO feature
 */
export declare function getTestimInbox(emailAddress: string): Promise<any[]>;
/**
 * Get document element outer html
 */
export declare function html(): Promise<string>;
/**
 * This method used to simulate upload file on <input type="file">
 */
export declare function inputFile(selector: SelectParam, inputFileUrls: string | string[]): Promise<void>;
/**
 * This method used to simulate drop file on drop zone
 */
export declare function dropFile(selector: SelectParam, inputFileUrls: string | string[]): Promise<void>;
/**
 * Refresh current page
 */
export declare function refresh(): Promise<void>;
/**
 * Get current page title
 */
export declare function title(): Promise<void>;
/**
 * Get current page url
 */
export declare function url(): Promise<void>;
/**
 * This method is used to extract an element's text content.
 * @see https://help.testim.io/docs/text
 */
export declare function text(selector: SelectParam): Promise<string>;
/**
 * Scroll to a given element on the screen.
 * @see https://help.testim.io/docs/scroll-to-element
 */
export declare function scrollToElement(selector: SelectParam, options?: ScrollOptions): Promise<void>;
/**
 * This method is used to set an element's text content. If the element already has text content it overrides it.
 * @see https://help.testim.io/docs/type
 */
export declare function type(selector: SelectParam, textValue: string): Promise<void>;
/**
 * This method is used to run custom JavaScript in the browser application page. This is useful as an escape hatch and in order to implement interactions that are not available out of the box with Testim or in order to interact with the page JavaScript.
 * @see https://help.testim.io/docs/evaluate
 */
export declare function evaluate<R, U extends any[]>(fn: (...any: U) => R | Promise<R>, ...parameters: U): Promise<R>;
/**
 * This method is used to execute an arbitrary command that runs in Node.js from within the test
 * @see https://help.testim.io/docs/cli-action
 */
export declare function cliAction<R, U extends any[]>(fn: (...any: U) => R | Promise<R>, ...parameters: U): Promise<R>;
/**
 * The go command navigates to a given web page in the controlled browser.
 * @see https://help.testim.io/docs/go
 */
export declare function go(url: string): Promise<void>;
/**
 * Sets a cookie on a given page.
 * @see https://help.testim.io/docs/set-cookie
 */
export declare function setCookie(cookieData: CookieData): Promise<void>;
/**
 * Gets a cookie by a specific name.
 * @see https://help.testim.io/docs/get-cookie
 */
export declare function getCookie(name: string): Promise<CookieData>;
/**
 * Hovers over the given element on the screen, on the element center by default.
 * @see https://help.testim.io/docs/hover
 */
export declare function hover(selector: SelectParam, options: HoverOptions): Promise<void>;
/**
 * This method checks that an element matching the given selector exists on the page
 * @see https://help.testim.io/docs/exists
 */
export declare function exists(selector: SelectParam): Promise<boolean>;
/**
 * This method is used to check if a checkbox element is checked or not.
 * @see https://help.testim.io/docs/checkbox
 */
export declare function checkbox(selector: SelectParam): Promise<boolean>;
/**
 * This method is used to check if a radio element is checked or not.
 * @see https://help.testim.io/docs/radio
 */
export declare function radio(selector: SelectParam): Promise<void>;
/**
 * This method selects a given <option> element from an HTML <select> element.
 * @see https://help.testim.io/docs/select
 */
export declare function selectOption(selector: SelectParam): Promise<void>;
/**
 * Send a given key to the browser (for example tab).
 * @see https://help.testim.io/docs/send-character
 */
export declare function sendCharacter(selector: SelectParam, keyCode: number): Promise<void>;
/**
 * Drags and drops on the given element onto another element on the page using HTML5 drag and drop events.
 * @see https://help.testim.io/docs/drag-and-drop
 */
export declare function dragAndDrop(sourceSelector: SelectParam, targetSelector: SelectParam): Promise<void>;
/**
 * Dragged the given element alongside the given x/y path.
 * @see https://help.testim.io/docs/drag
 */
export declare function drag(selector: SelectParam, dragPath: Point[]): Promise<void>;
/**
 * https://help.testim.io/docs/scroll-to-position
 * @see https://help.testim.io/docs/scroll-to-position
 */
export declare function scrollToPosition(x: number, y: number, options?: ScrollOptions): Promise<void>;
/**
 * This method submits the given form element.
 * @see https://help.testim.io/docs/submit
 */
export declare function submit(selector: SelectParam): Promise<void>;
/**
 * This method polls the page every 100 (default ms) until a passed JavaScript value is true (well, truthy).
 * @see https://help.testim.io/docs/wait-for-code
 */
export declare function waitForCode(fn: Function, options?: WaitForCodeOptions): Promise<void>;
/**
 * Waits for an element to exist on the screen and be visible.
 * @see https://help.testim.io/docs/resize
 */
export declare function resize(options: ResizeOptions): Promise<void>;
/**
 * Waits for an element to exist on the screen.
 * @see https://help.testim.io/docs/wait-for-element
 */
export declare function waitForElement(selector: SelectParam, options?: WaitForElementOptions): Promise<void>;
/**
 * Waits for an element to exist on the screen.
 * @see https://help.testim.io/docs/wait-for-element
 */
export declare function waitForNoElement(selector: SelectParam, options?: WaitForElementOptions): Promise<void>;
/**
 * Waits for an element to exist on the screen and its text equal to expected value.
 * @see https://help.testim.io/docs/wait-for-text
 */
export declare function waitForText(selector: SelectParam, expectedValue: string | RegExp, options?: WaitForTextOptions): Promise<void>;
export declare const screenshot: {
    /**
     * Takes a screenshot of the whole screen
     */
    viewport: () => Promise<string>;
    /**
     * Takes a screenshot of the whole page by scrolling down and taking screenshots of the different parts and stitching them together
     */
    stitch: () => Promise<string>;
    /**
     * Takes a screenshot of a specific element
     */
    element: (selector: SelectParam) => Promise<string>;
};
/**
 * Defines a test to run.
 * @see https://help.testim.io/docs/getting-started
 */
export declare function it(name: string | Function, fn?: Function): void;
export declare namespace it {
    var skip: typeof import(".").skip;
    var only: typeof import(".").only;
}
/**
 * Defines a test to run.
 * @see https://help.testim.io/docs/getting-started
 */
export declare function test(name: string | Function, fn?: Function): void;
export declare namespace test {
    var skip: typeof import(".").skip;
    var only: typeof import(".").only;
}
/**
 * Defines a test suite to run.
 * @see https://help.testim.io/docs/getting-started
 */
export declare function describe(name: string, fn: Function): void;
export declare namespace describe {
    var skip: typeof describeSkip;
    var only: typeof describeOnly;
}
/**
 * Defines a piece of code to run before all tests in this file.
 * @see https://help.testim.io/docs/getting-started
 */
export declare function before(fn: Function): void;
/**
 * Defines a piece of code to run before each test in this file.
 * @see https://help.testim.io/docs/getting-started
 */
export declare function beforeEach(fn: Function): void;
/**
 * Defines a piece of code to run after  all tests in this file.
 * @see https://help.testim.io/docs/getting-started
 */
export declare function after(fn: Function): void;
/**
 * Defines a piece of code to run after each test in this file.
 * @see https://help.testim.io/docs/getting-started
 */
export declare function afterEach(fn: Function): void;
/**
 * Skips the given test.
 * @see https://help.testim.io/docs/getting-started
 */
export declare function skip(name: string | Function, fn?: Function): void;
/**
 * Runs only the current test or test suite in this file.
 * @see https://help.testim.io/docs/getting-started
 */
export declare function only(name: string | Function, fn?: Function): void;
/**
 * Skips the given suite.
 * @see https://help.testim.io/docs/getting-started
 */
export declare function describeSkip(name: string, fn: Function): void;
/**
 * Runs only given suite.
 * @see https://help.testim.io/docs/getting-started
 */
export declare function describeOnly(name: string, fn: Function): void;
/**
 * A SmartLocator is like a stable selector. It contains a ton of interesting metadata and it's one of the bits Testim's AI
 * runs reinforcement learning on. It selects each element in thousands of ways and runs a consensus algorithm on the results.
 * @see https://help.testim.io/docs/working-with-locators
 */
export declare class Locator {
    static fromSelector(selector: string): TDKStepLocator;
    static set(locators: any): void;
    static for(locatorId: string): TDKStepLocator;
    /**
     * Sets the locator confidence threshold
     * @param threshold the locator conidence score
     */
    setConfidenceThreshold(threshold: number): void;
}
/**
 * Finds a Smart Locator by name
 * @see https://help.testim.io/docs/working-with-locators
 */
export declare function l(locatorId: string): TDKStepLocator;
/**
 * Create Locator from CSS selector
 * @see https://help.testim.io/docs/working-with-locators
 */
export declare function fromSelector(selector: string): TDKStepLocator;
/**
 * Changes the tab or frame context
 * @see https://help.testim.io/docs/with-context
 */
export declare function withContext(contextOptions: any): any;
export {};
